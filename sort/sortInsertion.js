/**
 * Сортировка вставками
 *
 * Суть его заключается в том, что в цикле один за другим выбираются элементы массива и сравниваются с элементами, стоящими перед ними, до тех пор пока не будет найдет элемент, меньший текущего, или мы не дойдем до начала массива.
 * Перед ним мы и вставляем текущий, для этого предварительно сдвинув все элементы, которые оказались больше текущего, в сторону увеличения на один индекс.
 *
 * Используется в V8 как реализация Array.prototype.sort() для массивов с менее чем 23 элементами.
 * Из-за константных множителей и членов более низкого порядка алгоритм с более высоким порядком роста может выполняться для небольших входных данных быстрее, чем алгоритм с более низким порядком роста
 * Для более чем 23 элемента в V8 используется sortQuick.
 *
 * O(n²)
 * Сложность O(n²) только для худшего случая (массива, отсортированного в обратном порядке), а для лучшего случая сложность будет O(n) — достаточно одного прохода, чтобы понять что массив отсортирован.
 * При этом и затраты памяти всего O(n)
 * устойчивый
 *
 * @param {[]} arr
 * @returns {[]}
 */
export default function sortInsertion(arr) {
  for (let i = 1, l = arr.length; i < l; i++) {
    const current = arr[i];
    let j = i;
    while (j > 0 && arr[j - 1] > current) arr[j] = arr[--j];
    arr[j] = current;
  }
  return arr;
}
